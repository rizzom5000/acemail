#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. 11.19.08
//     Runtime Version:2.0.50727.1434
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[System.Data.Linq.Mapping.DatabaseAttribute(Name="project")]
public partial class Project : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertClient(Client instance);
  partial void UpdateClient(Client instance);
  partial void DeleteClient(Client instance);
  partial void InsertClientDependents(ClientDependents instance);
  partial void UpdateClientDependents(ClientDependents instance);
  partial void DeleteClientDependents(ClientDependents instance);
  partial void InsertData(Data instance);
  partial void UpdateData(Data instance);
  partial void DeleteData(Data instance);
  partial void InsertEmail(Email instance);
  partial void UpdateEmail(Email instance);
  partial void DeleteEmail(Email instance);
  partial void InsertEml(Eml instance);
  partial void UpdateEml(Eml instance);
  partial void DeleteEml(Eml instance);
  partial void InsertEvent(Event instance);
  partial void UpdateEvent(Event instance);
  partial void DeleteEvent(Event instance);
  partial void InsertEventClients(EventClients instance);
  partial void UpdateEventClients(EventClients instance);
  partial void DeleteEventClients(EventClients instance);
  partial void InsertEventDatas(EventDatas instance);
  partial void UpdateEventDatas(EventDatas instance);
  partial void DeleteEventDatas(EventDatas instance);
  partial void InsertEventEmls(EventEmls instance);
  partial void UpdateEventEmls(EventEmls instance);
  partial void DeleteEventEmls(EventEmls instance);
  partial void InsertEventGroups(EventGroups instance);
  partial void UpdateEventGroups(EventGroups instance);
  partial void DeleteEventGroups(EventGroups instance);
  partial void InsertFile(File instance);
  partial void UpdateFile(File instance);
  partial void DeleteFile(File instance);
  partial void InsertGroup(Group instance);
  partial void UpdateGroup(Group instance);
  partial void DeleteGroup(Group instance);
  partial void InsertGroupClients(GroupClients instance);
  partial void UpdateGroupClients(GroupClients instance);
  partial void DeleteGroupClients(GroupClients instance);
  partial void InsertReferral(Referral instance);
  partial void UpdateReferral(Referral instance);
  partial void DeleteReferral(Referral instance);
  partial void InsertUser(User instance);
  partial void UpdateUser(User instance);
  partial void DeleteUser(User instance);
  partial void InsertUserClients(UserClients instance);
  partial void UpdateUserClients(UserClients instance);
  partial void DeleteUserClients(UserClients instance);
  partial void InsertUserCredentials(UserCredentials instance);
  partial void UpdateUserCredentials(UserCredentials instance);
  partial void DeleteUserCredentials(UserCredentials instance);
  partial void InsertUserData(UserData instance);
  partial void UpdateUserData(UserData instance);
  partial void DeleteUserData(UserData instance);
  partial void InsertUserEmls(UserEmls instance);
  partial void UpdateUserEmls(UserEmls instance);
  partial void DeleteUserEmls(UserEmls instance);
  partial void InsertUserFiles(UserFiles instance);
  partial void UpdateUserFiles(UserFiles instance);
  partial void DeleteUserFiles(UserFiles instance);
  partial void InsertUserGroups(UserGroups instance);
  partial void UpdateUserGroups(UserGroups instance);
  partial void DeleteUserGroups(UserGroups instance);
  #endregion
	
	public Project(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public Project(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public Project(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public Project(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Client> Client
	{
		get
		{
			return this.GetTable<Client>();
		}
	}
	
	public System.Data.Linq.Table<ClientDependents> ClientDependents
	{
		get
		{
			return this.GetTable<ClientDependents>();
		}
	}
	
	public System.Data.Linq.Table<Data> Data
	{
		get
		{
			return this.GetTable<Data>();
		}
	}
	
	public System.Data.Linq.Table<Email> Email
	{
		get
		{
			return this.GetTable<Email>();
		}
	}
	
	public System.Data.Linq.Table<Eml> Eml
	{
		get
		{
			return this.GetTable<Eml>();
		}
	}
	
	public System.Data.Linq.Table<Event> Event
	{
		get
		{
			return this.GetTable<Event>();
		}
	}
	
	public System.Data.Linq.Table<EventClients> EventClients
	{
		get
		{
			return this.GetTable<EventClients>();
		}
	}
	
	public System.Data.Linq.Table<EventDatas> EventDatas
	{
		get
		{
			return this.GetTable<EventDatas>();
		}
	}
	
	public System.Data.Linq.Table<EventEmls> EventEmls
	{
		get
		{
			return this.GetTable<EventEmls>();
		}
	}
	
	public System.Data.Linq.Table<EventGroups> EventGroups
	{
		get
		{
			return this.GetTable<EventGroups>();
		}
	}
	
	public System.Data.Linq.Table<File> File
	{
		get
		{
			return this.GetTable<File>();
		}
	}
	
	public System.Data.Linq.Table<Group> Group
	{
		get
		{
			return this.GetTable<Group>();
		}
	}
	
	public System.Data.Linq.Table<GroupClients> GroupClients
	{
		get
		{
			return this.GetTable<GroupClients>();
		}
	}
	
	public System.Data.Linq.Table<Referral> Referral
	{
		get
		{
			return this.GetTable<Referral>();
		}
	}
	
	public System.Data.Linq.Table<User> User
	{
		get
		{
			return this.GetTable<User>();
		}
	}
	
	public System.Data.Linq.Table<UserClients> UserClients
	{
		get
		{
			return this.GetTable<UserClients>();
		}
	}
	
	public System.Data.Linq.Table<UserCredentials> UserCredentials
	{
		get
		{
			return this.GetTable<UserCredentials>();
		}
	}
	
	public System.Data.Linq.Table<UserData> UserData
	{
		get
		{
			return this.GetTable<UserData>();
		}
	}
	
	public System.Data.Linq.Table<UserEmls> UserEmls
	{
		get
		{
			return this.GetTable<UserEmls>();
		}
	}
	
	public System.Data.Linq.Table<UserFiles> UserFiles
	{
		get
		{
			return this.GetTable<UserFiles>();
		}
	}
	
	public System.Data.Linq.Table<UserGroups> UserGroups
	{
		get
		{
			return this.GetTable<UserGroups>();
		}
	}
}

[Table(Name="dbo.Client")]
public partial class Client : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _Clientid;
	
	private string _FirstName;
	
	private string _MiddleName;
	
	private string _LastName;
	
	private string _Address1;
	
	private string _Address2;
	
	private string _City;
	
	private string _StateCode;
	
	private string _PostalCode;
	
	private string _CountryCode;
	
	private string _PhonePrimary;
	
	private string _PhoneSecondary;
	
	private string _PhoneMobile;
	
	private string _Photo;
	
	private System.DateTime _Createddate;
	
	private System.DateTime _Updateddate;
	
	private EntitySet<ClientDependents> _ClientDependents;
	
	private EntitySet<ClientDependents> _ClientDependents_Client1;
	
	private EntitySet<EventClients> _EventClients;
	
	private EntitySet<GroupClients> _GroupClients;
	
	private EntitySet<UserClients> _UserClients;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClientidChanging(System.Guid value);
    partial void OnClientidChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnMiddleNameChanging(string value);
    partial void OnMiddleNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnAddress1Changing(string value);
    partial void OnAddress1Changed();
    partial void OnAddress2Changing(string value);
    partial void OnAddress2Changed();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateCodeChanging(string value);
    partial void OnStateCodeChanged();
    partial void OnPostalCodeChanging(string value);
    partial void OnPostalCodeChanged();
    partial void OnCountryCodeChanging(string value);
    partial void OnCountryCodeChanged();
    partial void OnPhonePrimaryChanging(string value);
    partial void OnPhonePrimaryChanged();
    partial void OnPhoneSecondaryChanging(string value);
    partial void OnPhoneSecondaryChanged();
    partial void OnPhoneMobileChanging(string value);
    partial void OnPhoneMobileChanged();
    partial void OnPhotoChanging(string value);
    partial void OnPhotoChanged();
    partial void OnCreateddateChanging(System.DateTime value);
    partial void OnCreateddateChanged();
    partial void OnUpdateddateChanging(System.DateTime value);
    partial void OnUpdateddateChanged();
    #endregion
	
	public Client()
	{
		this._ClientDependents = new EntitySet<ClientDependents>(new Action<ClientDependents>(this.attach_ClientDependents), new Action<ClientDependents>(this.detach_ClientDependents));
		this._ClientDependents_Client1 = new EntitySet<ClientDependents>(new Action<ClientDependents>(this.attach_ClientDependents_Client1), new Action<ClientDependents>(this.detach_ClientDependents_Client1));
		this._EventClients = new EntitySet<EventClients>(new Action<EventClients>(this.attach_EventClients), new Action<EventClients>(this.detach_EventClients));
		this._GroupClients = new EntitySet<GroupClients>(new Action<GroupClients>(this.attach_GroupClients), new Action<GroupClients>(this.detach_GroupClients));
		this._UserClients = new EntitySet<UserClients>(new Action<UserClients>(this.attach_UserClients), new Action<UserClients>(this.detach_UserClients));
		OnCreated();
	}
	
	[Column(Name="clientid", Storage="_Clientid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Clientid
	{
		get
		{
			return this._Clientid;
		}
		set
		{
			if ((this._Clientid != value))
			{
				this.OnClientidChanging(value);
				this.SendPropertyChanging();
				this._Clientid = value;
				this.SendPropertyChanged("Clientid");
				this.OnClientidChanged();
			}
		}
	}
	
	[Column(Storage="_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string FirstName
	{
		get
		{
			return this._FirstName;
		}
		set
		{
			if ((this._FirstName != value))
			{
				this.OnFirstNameChanging(value);
				this.SendPropertyChanging();
				this._FirstName = value;
				this.SendPropertyChanged("FirstName");
				this.OnFirstNameChanged();
			}
		}
	}
	
	[Column(Storage="_MiddleName", DbType="VarChar(50)")]
	public string MiddleName
	{
		get
		{
			return this._MiddleName;
		}
		set
		{
			if ((this._MiddleName != value))
			{
				this.OnMiddleNameChanging(value);
				this.SendPropertyChanging();
				this._MiddleName = value;
				this.SendPropertyChanged("MiddleName");
				this.OnMiddleNameChanged();
			}
		}
	}
	
	[Column(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string LastName
	{
		get
		{
			return this._LastName;
		}
		set
		{
			if ((this._LastName != value))
			{
				this.OnLastNameChanging(value);
				this.SendPropertyChanging();
				this._LastName = value;
				this.SendPropertyChanged("LastName");
				this.OnLastNameChanged();
			}
		}
	}
	
	[Column(Storage="_Address1", DbType="VarChar(50)")]
	public string Address1
	{
		get
		{
			return this._Address1;
		}
		set
		{
			if ((this._Address1 != value))
			{
				this.OnAddress1Changing(value);
				this.SendPropertyChanging();
				this._Address1 = value;
				this.SendPropertyChanged("Address1");
				this.OnAddress1Changed();
			}
		}
	}
	
	[Column(Storage="_Address2", DbType="VarChar(50)")]
	public string Address2
	{
		get
		{
			return this._Address2;
		}
		set
		{
			if ((this._Address2 != value))
			{
				this.OnAddress2Changing(value);
				this.SendPropertyChanging();
				this._Address2 = value;
				this.SendPropertyChanged("Address2");
				this.OnAddress2Changed();
			}
		}
	}
	
	[Column(Storage="_City", DbType="VarChar(50)")]
	public string City
	{
		get
		{
			return this._City;
		}
		set
		{
			if ((this._City != value))
			{
				this.OnCityChanging(value);
				this.SendPropertyChanging();
				this._City = value;
				this.SendPropertyChanged("City");
				this.OnCityChanged();
			}
		}
	}
	
	[Column(Storage="_StateCode", DbType="VarChar(2)")]
	public string StateCode
	{
		get
		{
			return this._StateCode;
		}
		set
		{
			if ((this._StateCode != value))
			{
				this.OnStateCodeChanging(value);
				this.SendPropertyChanging();
				this._StateCode = value;
				this.SendPropertyChanged("StateCode");
				this.OnStateCodeChanged();
			}
		}
	}
	
	[Column(Storage="_PostalCode", DbType="VarChar(10)")]
	public string PostalCode
	{
		get
		{
			return this._PostalCode;
		}
		set
		{
			if ((this._PostalCode != value))
			{
				this.OnPostalCodeChanging(value);
				this.SendPropertyChanging();
				this._PostalCode = value;
				this.SendPropertyChanged("PostalCode");
				this.OnPostalCodeChanged();
			}
		}
	}
	
	[Column(Storage="_CountryCode", DbType="VarChar(3)")]
	public string CountryCode
	{
		get
		{
			return this._CountryCode;
		}
		set
		{
			if ((this._CountryCode != value))
			{
				this.OnCountryCodeChanging(value);
				this.SendPropertyChanging();
				this._CountryCode = value;
				this.SendPropertyChanged("CountryCode");
				this.OnCountryCodeChanged();
			}
		}
	}
	
	[Column(Storage="_PhonePrimary", DbType="VarChar(50)")]
	public string PhonePrimary
	{
		get
		{
			return this._PhonePrimary;
		}
		set
		{
			if ((this._PhonePrimary != value))
			{
				this.OnPhonePrimaryChanging(value);
				this.SendPropertyChanging();
				this._PhonePrimary = value;
				this.SendPropertyChanged("PhonePrimary");
				this.OnPhonePrimaryChanged();
			}
		}
	}
	
	[Column(Storage="_PhoneSecondary", DbType="VarChar(50)")]
	public string PhoneSecondary
	{
		get
		{
			return this._PhoneSecondary;
		}
		set
		{
			if ((this._PhoneSecondary != value))
			{
				this.OnPhoneSecondaryChanging(value);
				this.SendPropertyChanging();
				this._PhoneSecondary = value;
				this.SendPropertyChanged("PhoneSecondary");
				this.OnPhoneSecondaryChanged();
			}
		}
	}
	
	[Column(Storage="_PhoneMobile", DbType="VarChar(50)")]
	public string PhoneMobile
	{
		get
		{
			return this._PhoneMobile;
		}
		set
		{
			if ((this._PhoneMobile != value))
			{
				this.OnPhoneMobileChanging(value);
				this.SendPropertyChanging();
				this._PhoneMobile = value;
				this.SendPropertyChanged("PhoneMobile");
				this.OnPhoneMobileChanged();
			}
		}
	}
	
	[Column(Storage="_Photo", DbType="VarChar(512)", CanBeNull=true)]
	public string Photo
	{
		get
		{
			return this._Photo;
		}
		set
		{
			if ((this._Photo != value))
			{
				this.OnPhotoChanging(value);
				this.SendPropertyChanging();
				this._Photo = value;
				this.SendPropertyChanged("Photo");
				this.OnPhotoChanged();
			}
		}
	}
	
	[Column(Name="createddate", Storage="_Createddate", DbType="DateTime NOT NULL")]
	public System.DateTime Createddate
	{
		get
		{
			return this._Createddate;
		}
		set
		{
			if ((this._Createddate != value))
			{
				this.OnCreateddateChanging(value);
				this.SendPropertyChanging();
				this._Createddate = value;
				this.SendPropertyChanged("Createddate");
				this.OnCreateddateChanged();
			}
		}
	}
	
	[Column(Name="updateddate", Storage="_Updateddate", DbType="DateTime NOT NULL")]
	public System.DateTime Updateddate
	{
		get
		{
			return this._Updateddate;
		}
		set
		{
			if ((this._Updateddate != value))
			{
				this.OnUpdateddateChanging(value);
				this.SendPropertyChanging();
				this._Updateddate = value;
				this.SendPropertyChanged("Updateddate");
				this.OnUpdateddateChanged();
			}
		}
	}
	
	[Association(Name="FK_ClientDependents_Client", Storage="_ClientDependents", ThisKey="Clientid", OtherKey="Clientid", DeleteRule="NO ACTION")]
	public EntitySet<ClientDependents> ClientDependents
	{
		get
		{
			return this._ClientDependents;
		}
		set
		{
			this._ClientDependents.Assign(value);
		}
	}
	
	[Association(Name="FK_ClientDependents_Client1", Storage="_ClientDependents_Client1", ThisKey="Clientid", OtherKey="Dependentid", DeleteRule="NO ACTION")]
	public EntitySet<ClientDependents> ClientDependents_Client1
	{
		get
		{
			return this._ClientDependents_Client1;
		}
		set
		{
			this._ClientDependents_Client1.Assign(value);
		}
	}
	
	[Association(Name="FK_EventClients_Client", Storage="_EventClients", ThisKey="Clientid", OtherKey="Clientid", DeleteRule="NO ACTION")]
	public EntitySet<EventClients> EventClients
	{
		get
		{
			return this._EventClients;
		}
		set
		{
			this._EventClients.Assign(value);
		}
	}
	
	[Association(Name="FK_GroupClients_Client", Storage="_GroupClients", ThisKey="Clientid", OtherKey="Clientid", DeleteRule="NO ACTION")]
	public EntitySet<GroupClients> GroupClients
	{
		get
		{
			return this._GroupClients;
		}
		set
		{
			this._GroupClients.Assign(value);
		}
	}
	
	[Association(Name="FK_UserClients_Client", Storage="_UserClients", ThisKey="Clientid", OtherKey="Clientid", DeleteRule="NO ACTION")]
	public EntitySet<UserClients> UserClients
	{
		get
		{
			return this._UserClients;
		}
		set
		{
			this._UserClients.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_ClientDependents(ClientDependents entity)
	{
		this.SendPropertyChanging();
		entity.Client = this;
	}
	
	private void detach_ClientDependents(ClientDependents entity)
	{
		this.SendPropertyChanging();
		entity.Client = null;
	}
	
	private void attach_ClientDependents_Client1(ClientDependents entity)
	{
		this.SendPropertyChanging();
		entity.Dependent = this;
	}
	
	private void detach_ClientDependents_Client1(ClientDependents entity)
	{
		this.SendPropertyChanging();
		entity.Dependent = null;
	}
	
	private void attach_EventClients(EventClients entity)
	{
		this.SendPropertyChanging();
		entity.Client = this;
	}
	
	private void detach_EventClients(EventClients entity)
	{
		this.SendPropertyChanging();
		entity.Client = null;
	}
	
	private void attach_GroupClients(GroupClients entity)
	{
		this.SendPropertyChanging();
		entity.Client = this;
	}
	
	private void detach_GroupClients(GroupClients entity)
	{
		this.SendPropertyChanging();
		entity.Client = null;
	}
	
	private void attach_UserClients(UserClients entity)
	{
		this.SendPropertyChanging();
		entity.Client = this;
	}
	
	private void detach_UserClients(UserClients entity)
	{
		this.SendPropertyChanging();
		entity.Client = null;
	}
}

[Table(Name="dbo.ClientDependents")]
public partial class ClientDependents : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _Clientid;
	
	private System.Guid _Dependentid;
	
	private EntityRef<Client> _Client;
	
	private EntityRef<Client> _Dependent;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClientidChanging(System.Guid value);
    partial void OnClientidChanged();
    partial void OnDependentidChanging(System.Guid value);
    partial void OnDependentidChanged();
    #endregion
	
	public ClientDependents()
	{
		this._Client = default(EntityRef<Client>);
		this._Dependent = default(EntityRef<Client>);
		OnCreated();
	}
	
	[Column(Name="clientid", Storage="_Clientid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Clientid
	{
		get
		{
			return this._Clientid;
		}
		set
		{
			if ((this._Clientid != value))
			{
				this.OnClientidChanging(value);
				this.SendPropertyChanging();
				this._Clientid = value;
				this.SendPropertyChanged("Clientid");
				this.OnClientidChanged();
			}
		}
	}
	
	[Column(Name="dependentid", Storage="_Dependentid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Dependentid
	{
		get
		{
			return this._Dependentid;
		}
		set
		{
			if ((this._Dependentid != value))
			{
				this.OnDependentidChanging(value);
				this.SendPropertyChanging();
				this._Dependentid = value;
				this.SendPropertyChanged("Dependentid");
				this.OnDependentidChanged();
			}
		}
	}
	
	[Association(Name="FK_ClientDependents_Client", Storage="_Client", ThisKey="Clientid", OtherKey="Clientid", IsForeignKey=true)]
	public Client Client
	{
		get
		{
			return this._Client.Entity;
		}
		set
		{
			Client previousValue = this._Client.Entity;
			if (((previousValue != value) 
						|| (this._Client.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Client.Entity = null;
					previousValue.ClientDependents.Remove(this);
				}
				this._Client.Entity = value;
				if ((value != null))
				{
					value.ClientDependents.Add(this);
					this._Clientid = value.Clientid;
				}
				else
				{
					this._Clientid = default(System.Guid);
				}
				this.SendPropertyChanged("Client");
			}
		}
	}
	
	[Association(Name="FK_ClientDependents_Client1", Storage="_Dependent", ThisKey="Dependentid", OtherKey="Clientid", IsForeignKey=true)]
	public Client Dependent
	{
		get
		{
			return this._Dependent.Entity;
		}
		set
		{
			Client previousValue = this._Dependent.Entity;
			if (((previousValue != value) 
						|| (this._Dependent.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Dependent.Entity = null;
					previousValue.ClientDependents_Client1.Remove(this);
				}
				this._Dependent.Entity = value;
				if ((value != null))
				{
					value.ClientDependents_Client1.Add(this);
					this._Dependentid = value.Clientid;
				}
				else
				{
					this._Dependentid = default(System.Guid);
				}
				this.SendPropertyChanged("Dependent");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Data")]
public partial class Data : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _Dataid;
	
	private int _Type;
	
	private System.Byte[] _DataItem;
	
	private System.DateTime _Createddate;
	
	private System.DateTime _Updateddate;
	
	private EntitySet<EventDatas> _EventDatas;
	
	private EntitySet<UserData> _UserData;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDataidChanging(System.Guid value);
    partial void OnDataidChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnDataItemChanging(System.Byte[] value);
    partial void OnDataItemChanged();
    partial void OnCreateddateChanging(System.DateTime value);
    partial void OnCreateddateChanged();
    partial void OnUpdateddateChanging(System.DateTime value);
    partial void OnUpdateddateChanged();
    #endregion
	
	public Data()
	{
		this._EventDatas = new EntitySet<EventDatas>(new Action<EventDatas>(this.attach_EventDatas), new Action<EventDatas>(this.detach_EventDatas));
		this._UserData = new EntitySet<UserData>(new Action<UserData>(this.attach_UserData), new Action<UserData>(this.detach_UserData));
		OnCreated();
	}
	
	[Column(Name="dataid", Storage="_Dataid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Dataid
	{
		get
		{
			return this._Dataid;
		}
		set
		{
			if ((this._Dataid != value))
			{
				this.OnDataidChanging(value);
				this.SendPropertyChanging();
				this._Dataid = value;
				this.SendPropertyChanged("Dataid");
				this.OnDataidChanged();
			}
		}
	}
	
	[Column(Storage="_Type", DbType="Int NOT NULL")]
	public int Type
	{
		get
		{
			return this._Type;
		}
		set
		{
			if ((this._Type != value))
			{
				this.OnTypeChanging(value);
				this.SendPropertyChanging();
				this._Type = value;
				this.SendPropertyChanged("Type");
				this.OnTypeChanged();
			}
		}
	}
	
	[Column(Storage="_DataItem", DbType="VarBinary(5000)", CanBeNull=true)]
	public System.Byte[] DataItem
	{
		get
		{
			return this._DataItem;
		}
		set
		{
			if ((this._DataItem != value))
			{
				this.OnDataItemChanging(value);
				this.SendPropertyChanging();
				this._DataItem = value;
				this.SendPropertyChanged("DataItem");
				this.OnDataItemChanged();
			}
		}
	}
	
	[Column(Name="createddate", Storage="_Createddate", DbType="DateTime NOT NULL")]
	public System.DateTime Createddate
	{
		get
		{
			return this._Createddate;
		}
		set
		{
			if ((this._Createddate != value))
			{
				this.OnCreateddateChanging(value);
				this.SendPropertyChanging();
				this._Createddate = value;
				this.SendPropertyChanged("Createddate");
				this.OnCreateddateChanged();
			}
		}
	}
	
	[Column(Name="updateddate", Storage="_Updateddate", DbType="DateTime NOT NULL")]
	public System.DateTime Updateddate
	{
		get
		{
			return this._Updateddate;
		}
		set
		{
			if ((this._Updateddate != value))
			{
				this.OnUpdateddateChanging(value);
				this.SendPropertyChanging();
				this._Updateddate = value;
				this.SendPropertyChanged("Updateddate");
				this.OnUpdateddateChanged();
			}
		}
	}
	
	[Association(Name="FK_EventDatas_Data", Storage="_EventDatas", ThisKey="Dataid", OtherKey="Dataid", DeleteRule="NO ACTION")]
	public EntitySet<EventDatas> EventDatas
	{
		get
		{
			return this._EventDatas;
		}
		set
		{
			this._EventDatas.Assign(value);
		}
	}
	
	[Association(Name="FK_UserData_Data", Storage="_UserData", ThisKey="Dataid", OtherKey="Dataid", DeleteRule="NO ACTION")]
	public EntitySet<UserData> UserData
	{
		get
		{
			return this._UserData;
		}
		set
		{
			this._UserData.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_EventDatas(EventDatas entity)
	{
		this.SendPropertyChanging();
		entity.Data = this;
	}
	
	private void detach_EventDatas(EventDatas entity)
	{
		this.SendPropertyChanging();
		entity.Data = null;
	}
	
	private void attach_UserData(UserData entity)
	{
		this.SendPropertyChanging();
		entity.Data = this;
	}
	
	private void detach_UserData(UserData entity)
	{
		this.SendPropertyChanging();
		entity.Data = null;
	}
}

[Table(Name="dbo.Email")]
public partial class Email : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _Emailid;
	
	private System.Guid _Ownerid;
	
	private string _Emailaddress;
	
	private System.DateTime _Createddate;
	
	private System.DateTime _Updateddate;
	
	private EntitySet<GroupClients> _GroupClients;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmailidChanging(System.Guid value);
    partial void OnEmailidChanged();
    partial void OnOwneridChanging(System.Guid value);
    partial void OnOwneridChanged();
    partial void OnEmailaddressChanging(string value);
    partial void OnEmailaddressChanged();
    partial void OnCreateddateChanging(System.DateTime value);
    partial void OnCreateddateChanged();
    partial void OnUpdateddateChanging(System.DateTime value);
    partial void OnUpdateddateChanged();
    #endregion
	
	public Email()
	{
		this._GroupClients = new EntitySet<GroupClients>(new Action<GroupClients>(this.attach_GroupClients), new Action<GroupClients>(this.detach_GroupClients));
		OnCreated();
	}
	
	[Column(Name="emailid", Storage="_Emailid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Emailid
	{
		get
		{
			return this._Emailid;
		}
		set
		{
			if ((this._Emailid != value))
			{
				this.OnEmailidChanging(value);
				this.SendPropertyChanging();
				this._Emailid = value;
				this.SendPropertyChanged("Emailid");
				this.OnEmailidChanged();
			}
		}
	}
	
	[Column(Name="ownerid", Storage="_Ownerid", DbType="UniqueIdentifier NOT NULL")]
	public System.Guid Ownerid
	{
		get
		{
			return this._Ownerid;
		}
		set
		{
			if ((this._Ownerid != value))
			{
				this.OnOwneridChanging(value);
				this.SendPropertyChanging();
				this._Ownerid = value;
				this.SendPropertyChanged("Ownerid");
				this.OnOwneridChanged();
			}
		}
	}
	
	[Column(Name="emailaddress", Storage="_Emailaddress", DbType="VarChar(50)")]
	public string Emailaddress
	{
		get
		{
			return this._Emailaddress;
		}
		set
		{
			if ((this._Emailaddress != value))
			{
				this.OnEmailaddressChanging(value);
				this.SendPropertyChanging();
				this._Emailaddress = value;
				this.SendPropertyChanged("Emailaddress");
				this.OnEmailaddressChanged();
			}
		}
	}
	
	[Column(Name="createddate", Storage="_Createddate", DbType="DateTime NOT NULL")]
	public System.DateTime Createddate
	{
		get
		{
			return this._Createddate;
		}
		set
		{
			if ((this._Createddate != value))
			{
				this.OnCreateddateChanging(value);
				this.SendPropertyChanging();
				this._Createddate = value;
				this.SendPropertyChanged("Createddate");
				this.OnCreateddateChanged();
			}
		}
	}
	
	[Column(Name="updateddate", Storage="_Updateddate", DbType="DateTime NOT NULL")]
	public System.DateTime Updateddate
	{
		get
		{
			return this._Updateddate;
		}
		set
		{
			if ((this._Updateddate != value))
			{
				this.OnUpdateddateChanging(value);
				this.SendPropertyChanging();
				this._Updateddate = value;
				this.SendPropertyChanged("Updateddate");
				this.OnUpdateddateChanged();
			}
		}
	}
	
	[Association(Name="FK_GroupClients_Email", Storage="_GroupClients", ThisKey="Emailid", OtherKey="Clientemailid", DeleteRule="NO ACTION")]
	public EntitySet<GroupClients> GroupClients
	{
		get
		{
			return this._GroupClients;
		}
		set
		{
			this._GroupClients.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_GroupClients(GroupClients entity)
	{
		this.SendPropertyChanging();
		entity.Email = this;
	}
	
	private void detach_GroupClients(GroupClients entity)
	{
		this.SendPropertyChanging();
		entity.Email = null;
	}
}

[Table(Name="dbo.Eml")]
public partial class Eml : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _Emlid;
	
	private string _Emlpath;
	
	private string _Subject;
	
	private string _From;
	
	private System.Nullable<int> _Type;
	
	private System.Nullable<bool> _Answered;
	
	private System.Nullable<bool> _Seen;
	
	private System.DateTime _Createddate;
	
	private System.DateTime _Updateddate;
	
	private EntitySet<EventEmls> _EventEmls;
	
	private EntitySet<UserEmls> _UserEmls;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmlidChanging(System.Guid value);
    partial void OnEmlidChanged();
    partial void OnEmlpathChanging(string value);
    partial void OnEmlpathChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    partial void OnFromChanging(string value);
    partial void OnFromChanged();
    partial void OnTypeChanging(System.Nullable<int> value);
    partial void OnTypeChanged();
    partial void OnAnsweredChanging(System.Nullable<bool> value);
    partial void OnAnsweredChanged();
    partial void OnSeenChanging(System.Nullable<bool> value);
    partial void OnSeenChanged();
    partial void OnCreateddateChanging(System.DateTime value);
    partial void OnCreateddateChanged();
    partial void OnUpdateddateChanging(System.DateTime value);
    partial void OnUpdateddateChanged();
    #endregion
	
	public Eml()
	{
		this._EventEmls = new EntitySet<EventEmls>(new Action<EventEmls>(this.attach_EventEmls), new Action<EventEmls>(this.detach_EventEmls));
		this._UserEmls = new EntitySet<UserEmls>(new Action<UserEmls>(this.attach_UserEmls), new Action<UserEmls>(this.detach_UserEmls));
		OnCreated();
	}
	
	[Column(Name="emlid", Storage="_Emlid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Emlid
	{
		get
		{
			return this._Emlid;
		}
		set
		{
			if ((this._Emlid != value))
			{
				this.OnEmlidChanging(value);
				this.SendPropertyChanging();
				this._Emlid = value;
				this.SendPropertyChanged("Emlid");
				this.OnEmlidChanged();
			}
		}
	}
	
	[Column(Name="emlpath", Storage="_Emlpath", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Emlpath
	{
		get
		{
			return this._Emlpath;
		}
		set
		{
			if ((this._Emlpath != value))
			{
				this.OnEmlpathChanging(value);
				this.SendPropertyChanging();
				this._Emlpath = value;
				this.SendPropertyChanged("Emlpath");
				this.OnEmlpathChanged();
			}
		}
	}
	
	[Column(Name="subject", Storage="_Subject", DbType="VarChar(50)")]
	public string Subject
	{
		get
		{
			return this._Subject;
		}
		set
		{
			if ((this._Subject != value))
			{
				this.OnSubjectChanging(value);
				this.SendPropertyChanging();
				this._Subject = value;
				this.SendPropertyChanged("Subject");
				this.OnSubjectChanged();
			}
		}
	}
	
	[Column(Name="from", Storage="_From", DbType="VarChar(50)")]
	public string From
	{
		get
		{
			return this._From;
		}
		set
		{
			if ((this._From != value))
			{
				this.OnFromChanging(value);
				this.SendPropertyChanging();
				this._From = value;
				this.SendPropertyChanged("From");
				this.OnFromChanged();
			}
		}
	}
	
	[Column(Name="type", Storage="_Type", DbType="Int")]
	public System.Nullable<int> Type
	{
		get
		{
			return this._Type;
		}
		set
		{
			if ((this._Type != value))
			{
				this.OnTypeChanging(value);
				this.SendPropertyChanging();
				this._Type = value;
				this.SendPropertyChanged("Type");
				this.OnTypeChanged();
			}
		}
	}
	
	[Column(Name="answered", Storage="_Answered", DbType="Bit")]
	public System.Nullable<bool> Answered
	{
		get
		{
			return this._Answered;
		}
		set
		{
			if ((this._Answered != value))
			{
				this.OnAnsweredChanging(value);
				this.SendPropertyChanging();
				this._Answered = value;
				this.SendPropertyChanged("Answered");
				this.OnAnsweredChanged();
			}
		}
	}
	
	[Column(Name="seen", Storage="_Seen", DbType="Bit")]
	public System.Nullable<bool> Seen
	{
		get
		{
			return this._Seen;
		}
		set
		{
			if ((this._Seen != value))
			{
				this.OnSeenChanging(value);
				this.SendPropertyChanging();
				this._Seen = value;
				this.SendPropertyChanged("Seen");
				this.OnSeenChanged();
			}
		}
	}
	
	[Column(Name="createddate", Storage="_Createddate", DbType="DateTime NOT NULL")]
	public System.DateTime Createddate
	{
		get
		{
			return this._Createddate;
		}
		set
		{
			if ((this._Createddate != value))
			{
				this.OnCreateddateChanging(value);
				this.SendPropertyChanging();
				this._Createddate = value;
				this.SendPropertyChanged("Createddate");
				this.OnCreateddateChanged();
			}
		}
	}
	
	[Column(Name="updateddate", Storage="_Updateddate", DbType="DateTime NOT NULL")]
	public System.DateTime Updateddate
	{
		get
		{
			return this._Updateddate;
		}
		set
		{
			if ((this._Updateddate != value))
			{
				this.OnUpdateddateChanging(value);
				this.SendPropertyChanging();
				this._Updateddate = value;
				this.SendPropertyChanged("Updateddate");
				this.OnUpdateddateChanged();
			}
		}
	}
	
	[Association(Name="FK_EventEmls_Eml", Storage="_EventEmls", ThisKey="Emlid", OtherKey="Emlid", DeleteRule="NO ACTION")]
	public EntitySet<EventEmls> EventEmls
	{
		get
		{
			return this._EventEmls;
		}
		set
		{
			this._EventEmls.Assign(value);
		}
	}
	
	[Association(Name="FK_UserEmls_Eml", Storage="_UserEmls", ThisKey="Emlid", OtherKey="Emlid", DeleteRule="NO ACTION")]
	public EntitySet<UserEmls> UserEmls
	{
		get
		{
			return this._UserEmls;
		}
		set
		{
			this._UserEmls.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_EventEmls(EventEmls entity)
	{
		this.SendPropertyChanging();
		entity.Eml = this;
	}
	
	private void detach_EventEmls(EventEmls entity)
	{
		this.SendPropertyChanging();
		entity.Eml = null;
	}
	
	private void attach_UserEmls(UserEmls entity)
	{
		this.SendPropertyChanging();
		entity.Eml = this;
	}
	
	private void detach_UserEmls(UserEmls entity)
	{
		this.SendPropertyChanging();
		entity.Eml = null;
	}
}

[Table(Name="dbo.Event")]
public partial class Event : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _Eventid;
	
	private string _Name;
	
	private System.Guid _Userid;
	
	private int _Type;
	
	private System.DateTime _EventDate;
	
	private string _Notes;
	
	private System.DateTime _Createddate;
	
	private System.DateTime _Updateddate;
	
	private EntitySet<EventClients> _EventClients;
	
	private EntitySet<EventDatas> _EventDatas;
	
	private EntitySet<EventEmls> _EventEmls;
	
	private EntitySet<EventGroups> _EventGroups;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventidChanging(System.Guid value);
    partial void OnEventidChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUseridChanging(System.Guid value);
    partial void OnUseridChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnEventDateChanging(System.DateTime value);
    partial void OnEventDateChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnCreateddateChanging(System.DateTime value);
    partial void OnCreateddateChanged();
    partial void OnUpdateddateChanging(System.DateTime value);
    partial void OnUpdateddateChanged();
    #endregion
	
	public Event()
	{
		this._EventClients = new EntitySet<EventClients>(new Action<EventClients>(this.attach_EventClients), new Action<EventClients>(this.detach_EventClients));
		this._EventDatas = new EntitySet<EventDatas>(new Action<EventDatas>(this.attach_EventDatas), new Action<EventDatas>(this.detach_EventDatas));
		this._EventEmls = new EntitySet<EventEmls>(new Action<EventEmls>(this.attach_EventEmls), new Action<EventEmls>(this.detach_EventEmls));
		this._EventGroups = new EntitySet<EventGroups>(new Action<EventGroups>(this.attach_EventGroups), new Action<EventGroups>(this.detach_EventGroups));
		OnCreated();
	}
	
	[Column(Name="eventid", Storage="_Eventid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Eventid
	{
		get
		{
			return this._Eventid;
		}
		set
		{
			if ((this._Eventid != value))
			{
				this.OnEventidChanging(value);
				this.SendPropertyChanging();
				this._Eventid = value;
				this.SendPropertyChanged("Eventid");
				this.OnEventidChanged();
			}
		}
	}
	
	[Column(Name="name", Storage="_Name", DbType="VarChar(50)")]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Name="userid", Storage="_Userid", DbType="UniqueIdentifier NOT NULL")]
	public System.Guid Userid
	{
		get
		{
			return this._Userid;
		}
		set
		{
			if ((this._Userid != value))
			{
				this.OnUseridChanging(value);
				this.SendPropertyChanging();
				this._Userid = value;
				this.SendPropertyChanged("Userid");
				this.OnUseridChanged();
			}
		}
	}
	
	[Column(Storage="_Type", DbType="Int NOT NULL")]
	public int Type
	{
		get
		{
			return this._Type;
		}
		set
		{
			if ((this._Type != value))
			{
				this.OnTypeChanging(value);
				this.SendPropertyChanging();
				this._Type = value;
				this.SendPropertyChanged("Type");
				this.OnTypeChanged();
			}
		}
	}
	
	[Column(Storage="_EventDate", DbType="DateTime NOT NULL")]
	public System.DateTime EventDate
	{
		get
		{
			return this._EventDate;
		}
		set
		{
			if ((this._EventDate != value))
			{
				this.OnEventDateChanging(value);
				this.SendPropertyChanging();
				this._EventDate = value;
				this.SendPropertyChanged("EventDate");
				this.OnEventDateChanged();
			}
		}
	}
	
	[Column(Storage="_Notes", DbType="VarChar(5000)")]
	public string Notes
	{
		get
		{
			return this._Notes;
		}
		set
		{
			if ((this._Notes != value))
			{
				this.OnNotesChanging(value);
				this.SendPropertyChanging();
				this._Notes = value;
				this.SendPropertyChanged("Notes");
				this.OnNotesChanged();
			}
		}
	}
	
	[Column(Name="createddate", Storage="_Createddate", DbType="DateTime NOT NULL")]
	public System.DateTime Createddate
	{
		get
		{
			return this._Createddate;
		}
		set
		{
			if ((this._Createddate != value))
			{
				this.OnCreateddateChanging(value);
				this.SendPropertyChanging();
				this._Createddate = value;
				this.SendPropertyChanged("Createddate");
				this.OnCreateddateChanged();
			}
		}
	}
	
	[Column(Name="updateddate", Storage="_Updateddate", DbType="DateTime NOT NULL")]
	public System.DateTime Updateddate
	{
		get
		{
			return this._Updateddate;
		}
		set
		{
			if ((this._Updateddate != value))
			{
				this.OnUpdateddateChanging(value);
				this.SendPropertyChanging();
				this._Updateddate = value;
				this.SendPropertyChanged("Updateddate");
				this.OnUpdateddateChanged();
			}
		}
	}
	
	[Association(Name="FK_EventClients_Event", Storage="_EventClients", ThisKey="Eventid", OtherKey="Eventid", DeleteRule="NO ACTION")]
	public EntitySet<EventClients> EventClients
	{
		get
		{
			return this._EventClients;
		}
		set
		{
			this._EventClients.Assign(value);
		}
	}
	
	[Association(Name="FK_EventDatas_Event", Storage="_EventDatas", ThisKey="Eventid", OtherKey="Eventid", DeleteRule="NO ACTION")]
	public EntitySet<EventDatas> EventDatas
	{
		get
		{
			return this._EventDatas;
		}
		set
		{
			this._EventDatas.Assign(value);
		}
	}
	
	[Association(Name="FK_EventEmls_Event", Storage="_EventEmls", ThisKey="Eventid", OtherKey="Eventid", DeleteRule="NO ACTION")]
	public EntitySet<EventEmls> EventEmls
	{
		get
		{
			return this._EventEmls;
		}
		set
		{
			this._EventEmls.Assign(value);
		}
	}
	
	[Association(Name="FK_EventGroups_Event", Storage="_EventGroups", ThisKey="Eventid", OtherKey="Eventid", DeleteRule="NO ACTION")]
	public EntitySet<EventGroups> EventGroups
	{
		get
		{
			return this._EventGroups;
		}
		set
		{
			this._EventGroups.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_EventClients(EventClients entity)
	{
		this.SendPropertyChanging();
		entity.Event = this;
	}
	
	private void detach_EventClients(EventClients entity)
	{
		this.SendPropertyChanging();
		entity.Event = null;
	}
	
	private void attach_EventDatas(EventDatas entity)
	{
		this.SendPropertyChanging();
		entity.Event = this;
	}
	
	private void detach_EventDatas(EventDatas entity)
	{
		this.SendPropertyChanging();
		entity.Event = null;
	}
	
	private void attach_EventEmls(EventEmls entity)
	{
		this.SendPropertyChanging();
		entity.Event = this;
	}
	
	private void detach_EventEmls(EventEmls entity)
	{
		this.SendPropertyChanging();
		entity.Event = null;
	}
	
	private void attach_EventGroups(EventGroups entity)
	{
		this.SendPropertyChanging();
		entity.Event = this;
	}
	
	private void detach_EventGroups(EventGroups entity)
	{
		this.SendPropertyChanging();
		entity.Event = null;
	}
}

[Table(Name="dbo.EventClients")]
public partial class EventClients : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _Eventid;
	
	private System.Guid _Clientid;
	
	private EntityRef<Client> _Client;
	
	private EntityRef<Event> _Event;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventidChanging(System.Guid value);
    partial void OnEventidChanged();
    partial void OnClientidChanging(System.Guid value);
    partial void OnClientidChanged();
    #endregion
	
	public EventClients()
	{
		this._Client = default(EntityRef<Client>);
		this._Event = default(EntityRef<Event>);
		OnCreated();
	}
	
	[Column(Name="eventid", Storage="_Eventid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Eventid
	{
		get
		{
			return this._Eventid;
		}
		set
		{
			if ((this._Eventid != value))
			{
				this.OnEventidChanging(value);
				this.SendPropertyChanging();
				this._Eventid = value;
				this.SendPropertyChanged("Eventid");
				this.OnEventidChanged();
			}
		}
	}
	
	[Column(Name="clientid", Storage="_Clientid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Clientid
	{
		get
		{
			return this._Clientid;
		}
		set
		{
			if ((this._Clientid != value))
			{
				this.OnClientidChanging(value);
				this.SendPropertyChanging();
				this._Clientid = value;
				this.SendPropertyChanged("Clientid");
				this.OnClientidChanged();
			}
		}
	}
	
	[Association(Name="FK_EventClients_Client", Storage="_Client", ThisKey="Clientid", OtherKey="Clientid", IsForeignKey=true)]
	public Client Client
	{
		get
		{
			return this._Client.Entity;
		}
		set
		{
			Client previousValue = this._Client.Entity;
			if (((previousValue != value) 
						|| (this._Client.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Client.Entity = null;
					previousValue.EventClients.Remove(this);
				}
				this._Client.Entity = value;
				if ((value != null))
				{
					value.EventClients.Add(this);
					this._Clientid = value.Clientid;
				}
				else
				{
					this._Clientid = default(System.Guid);
				}
				this.SendPropertyChanged("Client");
			}
		}
	}
	
	[Association(Name="FK_EventClients_Event", Storage="_Event", ThisKey="Eventid", OtherKey="Eventid", IsForeignKey=true)]
	public Event Event
	{
		get
		{
			return this._Event.Entity;
		}
		set
		{
			Event previousValue = this._Event.Entity;
			if (((previousValue != value) 
						|| (this._Event.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Event.Entity = null;
					previousValue.EventClients.Remove(this);
				}
				this._Event.Entity = value;
				if ((value != null))
				{
					value.EventClients.Add(this);
					this._Eventid = value.Eventid;
				}
				else
				{
					this._Eventid = default(System.Guid);
				}
				this.SendPropertyChanged("Event");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.EventDatas")]
public partial class EventDatas : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _Eventid;
	
	private System.Guid _Dataid;
	
	private EntityRef<Data> _Data;
	
	private EntityRef<Event> _Event;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventidChanging(System.Guid value);
    partial void OnEventidChanged();
    partial void OnDataidChanging(System.Guid value);
    partial void OnDataidChanged();
    #endregion
	
	public EventDatas()
	{
		this._Data = default(EntityRef<Data>);
		this._Event = default(EntityRef<Event>);
		OnCreated();
	}
	
	[Column(Name="eventid", Storage="_Eventid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Eventid
	{
		get
		{
			return this._Eventid;
		}
		set
		{
			if ((this._Eventid != value))
			{
				this.OnEventidChanging(value);
				this.SendPropertyChanging();
				this._Eventid = value;
				this.SendPropertyChanged("Eventid");
				this.OnEventidChanged();
			}
		}
	}
	
	[Column(Name="dataid", Storage="_Dataid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Dataid
	{
		get
		{
			return this._Dataid;
		}
		set
		{
			if ((this._Dataid != value))
			{
				this.OnDataidChanging(value);
				this.SendPropertyChanging();
				this._Dataid = value;
				this.SendPropertyChanged("Dataid");
				this.OnDataidChanged();
			}
		}
	}
	
	[Association(Name="FK_EventDatas_Data", Storage="_Data", ThisKey="Dataid", OtherKey="Dataid", IsForeignKey=true)]
	public Data Data
	{
		get
		{
			return this._Data.Entity;
		}
		set
		{
			Data previousValue = this._Data.Entity;
			if (((previousValue != value) 
						|| (this._Data.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Data.Entity = null;
					previousValue.EventDatas.Remove(this);
				}
				this._Data.Entity = value;
				if ((value != null))
				{
					value.EventDatas.Add(this);
					this._Dataid = value.Dataid;
				}
				else
				{
					this._Dataid = default(System.Guid);
				}
				this.SendPropertyChanged("Data");
			}
		}
	}
	
	[Association(Name="FK_EventDatas_Event", Storage="_Event", ThisKey="Eventid", OtherKey="Eventid", IsForeignKey=true)]
	public Event Event
	{
		get
		{
			return this._Event.Entity;
		}
		set
		{
			Event previousValue = this._Event.Entity;
			if (((previousValue != value) 
						|| (this._Event.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Event.Entity = null;
					previousValue.EventDatas.Remove(this);
				}
				this._Event.Entity = value;
				if ((value != null))
				{
					value.EventDatas.Add(this);
					this._Eventid = value.Eventid;
				}
				else
				{
					this._Eventid = default(System.Guid);
				}
				this.SendPropertyChanged("Event");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.EventEmls")]
public partial class EventEmls : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _Eventid;
	
	private System.Guid _Emlid;
	
	private EntityRef<Eml> _Eml;
	
	private EntityRef<Event> _Event;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventidChanging(System.Guid value);
    partial void OnEventidChanged();
    partial void OnEmlidChanging(System.Guid value);
    partial void OnEmlidChanged();
    #endregion
	
	public EventEmls()
	{
		this._Eml = default(EntityRef<Eml>);
		this._Event = default(EntityRef<Event>);
		OnCreated();
	}
	
	[Column(Name="eventid", Storage="_Eventid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Eventid
	{
		get
		{
			return this._Eventid;
		}
		set
		{
			if ((this._Eventid != value))
			{
				this.OnEventidChanging(value);
				this.SendPropertyChanging();
				this._Eventid = value;
				this.SendPropertyChanged("Eventid");
				this.OnEventidChanged();
			}
		}
	}
	
	[Column(Name="emlid", Storage="_Emlid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Emlid
	{
		get
		{
			return this._Emlid;
		}
		set
		{
			if ((this._Emlid != value))
			{
				this.OnEmlidChanging(value);
				this.SendPropertyChanging();
				this._Emlid = value;
				this.SendPropertyChanged("Emlid");
				this.OnEmlidChanged();
			}
		}
	}
	
	[Association(Name="FK_EventEmls_Eml", Storage="_Eml", ThisKey="Emlid", OtherKey="Emlid", IsForeignKey=true)]
	public Eml Eml
	{
		get
		{
			return this._Eml.Entity;
		}
		set
		{
			Eml previousValue = this._Eml.Entity;
			if (((previousValue != value) 
						|| (this._Eml.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Eml.Entity = null;
					previousValue.EventEmls.Remove(this);
				}
				this._Eml.Entity = value;
				if ((value != null))
				{
					value.EventEmls.Add(this);
					this._Emlid = value.Emlid;
				}
				else
				{
					this._Emlid = default(System.Guid);
				}
				this.SendPropertyChanged("Eml");
			}
		}
	}
	
	[Association(Name="FK_EventEmls_Event", Storage="_Event", ThisKey="Eventid", OtherKey="Eventid", IsForeignKey=true)]
	public Event Event
	{
		get
		{
			return this._Event.Entity;
		}
		set
		{
			Event previousValue = this._Event.Entity;
			if (((previousValue != value) 
						|| (this._Event.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Event.Entity = null;
					previousValue.EventEmls.Remove(this);
				}
				this._Event.Entity = value;
				if ((value != null))
				{
					value.EventEmls.Add(this);
					this._Eventid = value.Eventid;
				}
				else
				{
					this._Eventid = default(System.Guid);
				}
				this.SendPropertyChanged("Event");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.EventGroups")]
public partial class EventGroups : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _Eventid;
	
	private System.Guid _Groupid;
	
	private EntityRef<Event> _Event;
	
	private EntityRef<Group> _Group;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventidChanging(System.Guid value);
    partial void OnEventidChanged();
    partial void OnGroupidChanging(System.Guid value);
    partial void OnGroupidChanged();
    #endregion
	
	public EventGroups()
	{
		this._Event = default(EntityRef<Event>);
		this._Group = default(EntityRef<Group>);
		OnCreated();
	}
	
	[Column(Name="eventid", Storage="_Eventid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Eventid
	{
		get
		{
			return this._Eventid;
		}
		set
		{
			if ((this._Eventid != value))
			{
				this.OnEventidChanging(value);
				this.SendPropertyChanging();
				this._Eventid = value;
				this.SendPropertyChanged("Eventid");
				this.OnEventidChanged();
			}
		}
	}
	
	[Column(Name="groupid", Storage="_Groupid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Groupid
	{
		get
		{
			return this._Groupid;
		}
		set
		{
			if ((this._Groupid != value))
			{
				this.OnGroupidChanging(value);
				this.SendPropertyChanging();
				this._Groupid = value;
				this.SendPropertyChanged("Groupid");
				this.OnGroupidChanged();
			}
		}
	}
	
	[Association(Name="FK_EventGroups_Event", Storage="_Event", ThisKey="Eventid", OtherKey="Eventid", IsForeignKey=true)]
	public Event Event
	{
		get
		{
			return this._Event.Entity;
		}
		set
		{
			Event previousValue = this._Event.Entity;
			if (((previousValue != value) 
						|| (this._Event.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Event.Entity = null;
					previousValue.EventGroups.Remove(this);
				}
				this._Event.Entity = value;
				if ((value != null))
				{
					value.EventGroups.Add(this);
					this._Eventid = value.Eventid;
				}
				else
				{
					this._Eventid = default(System.Guid);
				}
				this.SendPropertyChanged("Event");
			}
		}
	}
	
	[Association(Name="FK_EventGroups_Group", Storage="_Group", ThisKey="Groupid", OtherKey="Groupid", IsForeignKey=true)]
	public Group Group
	{
		get
		{
			return this._Group.Entity;
		}
		set
		{
			Group previousValue = this._Group.Entity;
			if (((previousValue != value) 
						|| (this._Group.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Group.Entity = null;
					previousValue.EventGroups.Remove(this);
				}
				this._Group.Entity = value;
				if ((value != null))
				{
					value.EventGroups.Add(this);
					this._Groupid = value.Groupid;
				}
				else
				{
					this._Groupid = default(System.Guid);
				}
				this.SendPropertyChanged("Group");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.File")]
public partial class File : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _Fileid;
	
	private string _Filename;
	
	private string _Extension;
	
	private string _Address;
	
	private System.DateTime _Createddate;
	
	private System.DateTime _Updateddate;
	
	private EntitySet<UserFiles> _UserFiles;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFileidChanging(System.Guid value);
    partial void OnFileidChanged();
    partial void OnFilenameChanging(string value);
    partial void OnFilenameChanged();
    partial void OnExtensionChanging(string value);
    partial void OnExtensionChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnCreateddateChanging(System.DateTime value);
    partial void OnCreateddateChanged();
    partial void OnUpdateddateChanging(System.DateTime value);
    partial void OnUpdateddateChanged();
    #endregion
	
	public File()
	{
		this._UserFiles = new EntitySet<UserFiles>(new Action<UserFiles>(this.attach_UserFiles), new Action<UserFiles>(this.detach_UserFiles));
		OnCreated();
	}
	
	[Column(Name="fileid", Storage="_Fileid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Fileid
	{
		get
		{
			return this._Fileid;
		}
		set
		{
			if ((this._Fileid != value))
			{
				this.OnFileidChanging(value);
				this.SendPropertyChanging();
				this._Fileid = value;
				this.SendPropertyChanged("Fileid");
				this.OnFileidChanged();
			}
		}
	}
	
	[Column(Name="filename", Storage="_Filename", DbType="VarChar(50)")]
	public string Filename
	{
		get
		{
			return this._Filename;
		}
		set
		{
			if ((this._Filename != value))
			{
				this.OnFilenameChanging(value);
				this.SendPropertyChanging();
				this._Filename = value;
				this.SendPropertyChanged("Filename");
				this.OnFilenameChanged();
			}
		}
	}
	
	[Column(Name="extension", Storage="_Extension", DbType="VarChar(4) NOT NULL", CanBeNull=false)]
	public string Extension
	{
		get
		{
			return this._Extension;
		}
		set
		{
			if ((this._Extension != value))
			{
				this.OnExtensionChanging(value);
				this.SendPropertyChanging();
				this._Extension = value;
				this.SendPropertyChanged("Extension");
				this.OnExtensionChanged();
			}
		}
	}
	
	[Column(Name="address", Storage="_Address", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[Column(Name="createddate", Storage="_Createddate", DbType="DateTime NOT NULL")]
	public System.DateTime Createddate
	{
		get
		{
			return this._Createddate;
		}
		set
		{
			if ((this._Createddate != value))
			{
				this.OnCreateddateChanging(value);
				this.SendPropertyChanging();
				this._Createddate = value;
				this.SendPropertyChanged("Createddate");
				this.OnCreateddateChanged();
			}
		}
	}
	
	[Column(Name="updateddate", Storage="_Updateddate", DbType="DateTime NOT NULL")]
	public System.DateTime Updateddate
	{
		get
		{
			return this._Updateddate;
		}
		set
		{
			if ((this._Updateddate != value))
			{
				this.OnUpdateddateChanging(value);
				this.SendPropertyChanging();
				this._Updateddate = value;
				this.SendPropertyChanged("Updateddate");
				this.OnUpdateddateChanged();
			}
		}
	}
	
	[Association(Name="FK_UserFiles_File", Storage="_UserFiles", ThisKey="Fileid", OtherKey="Fileid", DeleteRule="NO ACTION")]
	public EntitySet<UserFiles> UserFiles
	{
		get
		{
			return this._UserFiles;
		}
		set
		{
			this._UserFiles.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_UserFiles(UserFiles entity)
	{
		this.SendPropertyChanging();
		entity.File = this;
	}
	
	private void detach_UserFiles(UserFiles entity)
	{
		this.SendPropertyChanging();
		entity.File = null;
	}
}

[Table(Name="dbo.Group")]
public partial class Group : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _Groupid;
	
	private string _GroupName;
	
	private string _Notes;
	
	private System.DateTime _Createddate;
	
	private System.DateTime _Updateddate;
	
	private EntitySet<EventGroups> _EventGroups;
	
	private EntitySet<GroupClients> _GroupClients;
	
	private EntitySet<UserGroups> _UserGroups;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupidChanging(System.Guid value);
    partial void OnGroupidChanged();
    partial void OnGroupNameChanging(string value);
    partial void OnGroupNameChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnCreateddateChanging(System.DateTime value);
    partial void OnCreateddateChanged();
    partial void OnUpdateddateChanging(System.DateTime value);
    partial void OnUpdateddateChanged();
    #endregion
	
	public Group()
	{
		this._EventGroups = new EntitySet<EventGroups>(new Action<EventGroups>(this.attach_EventGroups), new Action<EventGroups>(this.detach_EventGroups));
		this._GroupClients = new EntitySet<GroupClients>(new Action<GroupClients>(this.attach_GroupClients), new Action<GroupClients>(this.detach_GroupClients));
		this._UserGroups = new EntitySet<UserGroups>(new Action<UserGroups>(this.attach_UserGroups), new Action<UserGroups>(this.detach_UserGroups));
		OnCreated();
	}
	
	[Column(Name="groupid", Storage="_Groupid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Groupid
	{
		get
		{
			return this._Groupid;
		}
		set
		{
			if ((this._Groupid != value))
			{
				this.OnGroupidChanging(value);
				this.SendPropertyChanging();
				this._Groupid = value;
				this.SendPropertyChanged("Groupid");
				this.OnGroupidChanged();
			}
		}
	}
	
	[Column(Storage="_GroupName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string GroupName
	{
		get
		{
			return this._GroupName;
		}
		set
		{
			if ((this._GroupName != value))
			{
				this.OnGroupNameChanging(value);
				this.SendPropertyChanging();
				this._GroupName = value;
				this.SendPropertyChanged("GroupName");
				this.OnGroupNameChanged();
			}
		}
	}
	
	[Column(Storage="_Notes", DbType="VarChar(5000)")]
	public string Notes
	{
		get
		{
			return this._Notes;
		}
		set
		{
			if ((this._Notes != value))
			{
				this.OnNotesChanging(value);
				this.SendPropertyChanging();
				this._Notes = value;
				this.SendPropertyChanged("Notes");
				this.OnNotesChanged();
			}
		}
	}
	
	[Column(Name="createddate", Storage="_Createddate", DbType="DateTime NOT NULL")]
	public System.DateTime Createddate
	{
		get
		{
			return this._Createddate;
		}
		set
		{
			if ((this._Createddate != value))
			{
				this.OnCreateddateChanging(value);
				this.SendPropertyChanging();
				this._Createddate = value;
				this.SendPropertyChanged("Createddate");
				this.OnCreateddateChanged();
			}
		}
	}
	
	[Column(Name="updateddate", Storage="_Updateddate", DbType="DateTime NOT NULL")]
	public System.DateTime Updateddate
	{
		get
		{
			return this._Updateddate;
		}
		set
		{
			if ((this._Updateddate != value))
			{
				this.OnUpdateddateChanging(value);
				this.SendPropertyChanging();
				this._Updateddate = value;
				this.SendPropertyChanged("Updateddate");
				this.OnUpdateddateChanged();
			}
		}
	}
	
	[Association(Name="FK_EventGroups_Group", Storage="_EventGroups", ThisKey="Groupid", OtherKey="Groupid", DeleteRule="NO ACTION")]
	public EntitySet<EventGroups> EventGroups
	{
		get
		{
			return this._EventGroups;
		}
		set
		{
			this._EventGroups.Assign(value);
		}
	}
	
	[Association(Name="FK_GroupClients_Group", Storage="_GroupClients", ThisKey="Groupid", OtherKey="Groupid", DeleteRule="NO ACTION")]
	public EntitySet<GroupClients> GroupClients
	{
		get
		{
			return this._GroupClients;
		}
		set
		{
			this._GroupClients.Assign(value);
		}
	}
	
	[Association(Name="FK_UserGroups_Group", Storage="_UserGroups", ThisKey="Groupid", OtherKey="Groupid", DeleteRule="NO ACTION")]
	public EntitySet<UserGroups> UserGroups
	{
		get
		{
			return this._UserGroups;
		}
		set
		{
			this._UserGroups.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_EventGroups(EventGroups entity)
	{
		this.SendPropertyChanging();
		entity.Group = this;
	}
	
	private void detach_EventGroups(EventGroups entity)
	{
		this.SendPropertyChanging();
		entity.Group = null;
	}
	
	private void attach_GroupClients(GroupClients entity)
	{
		this.SendPropertyChanging();
		entity.Group = this;
	}
	
	private void detach_GroupClients(GroupClients entity)
	{
		this.SendPropertyChanging();
		entity.Group = null;
	}
	
	private void attach_UserGroups(UserGroups entity)
	{
		this.SendPropertyChanging();
		entity.Group = this;
	}
	
	private void detach_UserGroups(UserGroups entity)
	{
		this.SendPropertyChanging();
		entity.Group = null;
	}
}

[Table(Name="dbo.GroupClients")]
public partial class GroupClients : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _Groupid;
	
	private System.Guid _Clientid;
	
	private System.Guid _Clientemailid;
	
	private System.Nullable<System.Guid> _Clientsmsid;
	
	private EntityRef<Client> _Client;
	
	private EntityRef<Email> _Email;
	
	private EntityRef<Group> _Group;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupidChanging(System.Guid value);
    partial void OnGroupidChanged();
    partial void OnClientidChanging(System.Guid value);
    partial void OnClientidChanged();
    partial void OnClientemailidChanging(System.Guid value);
    partial void OnClientemailidChanged();
    partial void OnClientsmsidChanging(System.Nullable<System.Guid> value);
    partial void OnClientsmsidChanged();
    #endregion
	
	public GroupClients()
	{
		this._Client = default(EntityRef<Client>);
		this._Email = default(EntityRef<Email>);
		this._Group = default(EntityRef<Group>);
		OnCreated();
	}
	
	[Column(Name="groupid", Storage="_Groupid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Groupid
	{
		get
		{
			return this._Groupid;
		}
		set
		{
			if ((this._Groupid != value))
			{
				this.OnGroupidChanging(value);
				this.SendPropertyChanging();
				this._Groupid = value;
				this.SendPropertyChanged("Groupid");
				this.OnGroupidChanged();
			}
		}
	}
	
	[Column(Name="clientid", Storage="_Clientid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Clientid
	{
		get
		{
			return this._Clientid;
		}
		set
		{
			if ((this._Clientid != value))
			{
				this.OnClientidChanging(value);
				this.SendPropertyChanging();
				this._Clientid = value;
				this.SendPropertyChanged("Clientid");
				this.OnClientidChanged();
			}
		}
	}
	
	[Column(Name="clientemailid", Storage="_Clientemailid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Clientemailid
	{
		get
		{
			return this._Clientemailid;
		}
		set
		{
			if ((this._Clientemailid != value))
			{
				this.OnClientemailidChanging(value);
				this.SendPropertyChanging();
				this._Clientemailid = value;
				this.SendPropertyChanged("Clientemailid");
				this.OnClientemailidChanged();
			}
		}
	}
	
	[Column(Name="clientsmsid", Storage="_Clientsmsid", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> Clientsmsid
	{
		get
		{
			return this._Clientsmsid;
		}
		set
		{
			if ((this._Clientsmsid != value))
			{
				this.OnClientsmsidChanging(value);
				this.SendPropertyChanging();
				this._Clientsmsid = value;
				this.SendPropertyChanged("Clientsmsid");
				this.OnClientsmsidChanged();
			}
		}
	}
	
	[Association(Name="FK_GroupClients_Client", Storage="_Client", ThisKey="Clientid", OtherKey="Clientid", IsForeignKey=true)]
	public Client Client
	{
		get
		{
			return this._Client.Entity;
		}
		set
		{
			Client previousValue = this._Client.Entity;
			if (((previousValue != value) 
						|| (this._Client.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Client.Entity = null;
					previousValue.GroupClients.Remove(this);
				}
				this._Client.Entity = value;
				if ((value != null))
				{
					value.GroupClients.Add(this);
					this._Clientid = value.Clientid;
				}
				else
				{
					this._Clientid = default(System.Guid);
				}
				this.SendPropertyChanged("Client");
			}
		}
	}
	
	[Association(Name="FK_GroupClients_Email", Storage="_Email", ThisKey="Clientemailid", OtherKey="Emailid", IsForeignKey=true)]
	public Email Email
	{
		get
		{
			return this._Email.Entity;
		}
		set
		{
			Email previousValue = this._Email.Entity;
			if (((previousValue != value) 
						|| (this._Email.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Email.Entity = null;
					previousValue.GroupClients.Remove(this);
				}
				this._Email.Entity = value;
				if ((value != null))
				{
					value.GroupClients.Add(this);
					this._Clientemailid = value.Emailid;
				}
				else
				{
					this._Clientemailid = default(System.Guid);
				}
				this.SendPropertyChanged("Email");
			}
		}
	}
	
	[Association(Name="FK_GroupClients_Group", Storage="_Group", ThisKey="Groupid", OtherKey="Groupid", IsForeignKey=true)]
	public Group Group
	{
		get
		{
			return this._Group.Entity;
		}
		set
		{
			Group previousValue = this._Group.Entity;
			if (((previousValue != value) 
						|| (this._Group.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Group.Entity = null;
					previousValue.GroupClients.Remove(this);
				}
				this._Group.Entity = value;
				if ((value != null))
				{
					value.GroupClients.Add(this);
					this._Groupid = value.Groupid;
				}
				else
				{
					this._Groupid = default(System.Guid);
				}
				this.SendPropertyChanged("Group");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Referral")]
public partial class Referral : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _Referralid;
	
	private System.Guid _ReferredClientID;
	
	private System.Guid _ReferredByID;
	
	private System.DateTime _ReferralDate;
	
	private string _Notes;
	
	private System.DateTime _Createddate;
	
	private System.DateTime _Updateddate;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReferralidChanging(System.Guid value);
    partial void OnReferralidChanged();
    partial void OnReferredClientIDChanging(System.Guid value);
    partial void OnReferredClientIDChanged();
    partial void OnReferredByIDChanging(System.Guid value);
    partial void OnReferredByIDChanged();
    partial void OnReferralDateChanging(System.DateTime value);
    partial void OnReferralDateChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnCreateddateChanging(System.DateTime value);
    partial void OnCreateddateChanged();
    partial void OnUpdateddateChanging(System.DateTime value);
    partial void OnUpdateddateChanged();
    #endregion
	
	public Referral()
	{
		OnCreated();
	}
	
	[Column(Name="referralid", Storage="_Referralid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Referralid
	{
		get
		{
			return this._Referralid;
		}
		set
		{
			if ((this._Referralid != value))
			{
				this.OnReferralidChanging(value);
				this.SendPropertyChanging();
				this._Referralid = value;
				this.SendPropertyChanged("Referralid");
				this.OnReferralidChanged();
			}
		}
	}
	
	[Column(Name="referredClientID", Storage="_ReferredClientID", DbType="UniqueIdentifier NOT NULL")]
	public System.Guid ReferredClientID
	{
		get
		{
			return this._ReferredClientID;
		}
		set
		{
			if ((this._ReferredClientID != value))
			{
				this.OnReferredClientIDChanging(value);
				this.SendPropertyChanging();
				this._ReferredClientID = value;
				this.SendPropertyChanged("ReferredClientID");
				this.OnReferredClientIDChanged();
			}
		}
	}
	
	[Column(Name="referredByID", Storage="_ReferredByID", DbType="UniqueIdentifier NOT NULL")]
	public System.Guid ReferredByID
	{
		get
		{
			return this._ReferredByID;
		}
		set
		{
			if ((this._ReferredByID != value))
			{
				this.OnReferredByIDChanging(value);
				this.SendPropertyChanging();
				this._ReferredByID = value;
				this.SendPropertyChanged("ReferredByID");
				this.OnReferredByIDChanged();
			}
		}
	}
	
	[Column(Storage="_ReferralDate", DbType="DateTime NOT NULL")]
	public System.DateTime ReferralDate
	{
		get
		{
			return this._ReferralDate;
		}
		set
		{
			if ((this._ReferralDate != value))
			{
				this.OnReferralDateChanging(value);
				this.SendPropertyChanging();
				this._ReferralDate = value;
				this.SendPropertyChanged("ReferralDate");
				this.OnReferralDateChanged();
			}
		}
	}
	
	[Column(Storage="_Notes", DbType="VarChar(5000)")]
	public string Notes
	{
		get
		{
			return this._Notes;
		}
		set
		{
			if ((this._Notes != value))
			{
				this.OnNotesChanging(value);
				this.SendPropertyChanging();
				this._Notes = value;
				this.SendPropertyChanged("Notes");
				this.OnNotesChanged();
			}
		}
	}
	
	[Column(Name="createddate", Storage="_Createddate", DbType="DateTime NOT NULL")]
	public System.DateTime Createddate
	{
		get
		{
			return this._Createddate;
		}
		set
		{
			if ((this._Createddate != value))
			{
				this.OnCreateddateChanging(value);
				this.SendPropertyChanging();
				this._Createddate = value;
				this.SendPropertyChanged("Createddate");
				this.OnCreateddateChanged();
			}
		}
	}
	
	[Column(Name="updateddate", Storage="_Updateddate", DbType="DateTime NOT NULL")]
	public System.DateTime Updateddate
	{
		get
		{
			return this._Updateddate;
		}
		set
		{
			if ((this._Updateddate != value))
			{
				this.OnUpdateddateChanging(value);
				this.SendPropertyChanging();
				this._Updateddate = value;
				this.SendPropertyChanged("Updateddate");
				this.OnUpdateddateChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.User")]
public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _Userid;
	
	private string _Login;
	
	private string _Password;
	
	private string _ContactEmail;
	
	private string _Firstname;
	
	private string _Lastname;
	
	private System.DateTime _Createddate;
	
	private System.DateTime _Updateddate;
	
	private EntitySet<UserClients> _UserClients;
	
	private EntityRef<UserCredentials> _UserCredentials;
	
	private EntitySet<UserData> _UserData;
	
	private EntitySet<UserEmls> _UserEmls;
	
	private EntitySet<UserFiles> _UserFiles;
	
	private EntitySet<UserGroups> _UserGroups;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUseridChanging(System.Guid value);
    partial void OnUseridChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnContactEmailChanging(string value);
    partial void OnContactEmailChanged();
    partial void OnFirstnameChanging(string value);
    partial void OnFirstnameChanged();
    partial void OnLastnameChanging(string value);
    partial void OnLastnameChanged();
    partial void OnCreateddateChanging(System.DateTime value);
    partial void OnCreateddateChanged();
    partial void OnUpdateddateChanging(System.DateTime value);
    partial void OnUpdateddateChanged();
    #endregion
	
	public User()
	{
		this._UserClients = new EntitySet<UserClients>(new Action<UserClients>(this.attach_UserClients), new Action<UserClients>(this.detach_UserClients));
		this._UserCredentials = default(EntityRef<UserCredentials>);
		this._UserData = new EntitySet<UserData>(new Action<UserData>(this.attach_UserData), new Action<UserData>(this.detach_UserData));
		this._UserEmls = new EntitySet<UserEmls>(new Action<UserEmls>(this.attach_UserEmls), new Action<UserEmls>(this.detach_UserEmls));
		this._UserFiles = new EntitySet<UserFiles>(new Action<UserFiles>(this.attach_UserFiles), new Action<UserFiles>(this.detach_UserFiles));
		this._UserGroups = new EntitySet<UserGroups>(new Action<UserGroups>(this.attach_UserGroups), new Action<UserGroups>(this.detach_UserGroups));
		OnCreated();
	}
	
	[Column(Name="userid", Storage="_Userid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Userid
	{
		get
		{
			return this._Userid;
		}
		set
		{
			if ((this._Userid != value))
			{
				this.OnUseridChanging(value);
				this.SendPropertyChanging();
				this._Userid = value;
				this.SendPropertyChanged("Userid");
				this.OnUseridChanged();
			}
		}
	}
	
	[Column(Storage="_Login", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Login
	{
		get
		{
			return this._Login;
		}
		set
		{
			if ((this._Login != value))
			{
				this.OnLoginChanging(value);
				this.SendPropertyChanging();
				this._Login = value;
				this.SendPropertyChanged("Login");
				this.OnLoginChanged();
			}
		}
	}
	
	[Column(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Password
	{
		get
		{
			return this._Password;
		}
		set
		{
			if ((this._Password != value))
			{
				this.OnPasswordChanging(value);
				this.SendPropertyChanging();
				this._Password = value;
				this.SendPropertyChanged("Password");
				this.OnPasswordChanged();
			}
		}
	}
	
	[Column(Storage="_ContactEmail", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string ContactEmail
	{
		get
		{
			return this._ContactEmail;
		}
		set
		{
			if ((this._ContactEmail != value))
			{
				this.OnContactEmailChanging(value);
				this.SendPropertyChanging();
				this._ContactEmail = value;
				this.SendPropertyChanged("ContactEmail");
				this.OnContactEmailChanged();
			}
		}
	}
	
	[Column(Name="firstname", Storage="_Firstname", DbType="VarChar(50)")]
	public string Firstname
	{
		get
		{
			return this._Firstname;
		}
		set
		{
			if ((this._Firstname != value))
			{
				this.OnFirstnameChanging(value);
				this.SendPropertyChanging();
				this._Firstname = value;
				this.SendPropertyChanged("Firstname");
				this.OnFirstnameChanged();
			}
		}
	}
	
	[Column(Name="lastname", Storage="_Lastname", DbType="VarChar(50)")]
	public string Lastname
	{
		get
		{
			return this._Lastname;
		}
		set
		{
			if ((this._Lastname != value))
			{
				this.OnLastnameChanging(value);
				this.SendPropertyChanging();
				this._Lastname = value;
				this.SendPropertyChanged("Lastname");
				this.OnLastnameChanged();
			}
		}
	}
	
	[Column(Name="createddate", Storage="_Createddate", DbType="DateTime NOT NULL")]
	public System.DateTime Createddate
	{
		get
		{
			return this._Createddate;
		}
		set
		{
			if ((this._Createddate != value))
			{
				this.OnCreateddateChanging(value);
				this.SendPropertyChanging();
				this._Createddate = value;
				this.SendPropertyChanged("Createddate");
				this.OnCreateddateChanged();
			}
		}
	}
	
	[Column(Name="updateddate", Storage="_Updateddate", DbType="DateTime NOT NULL")]
	public System.DateTime Updateddate
	{
		get
		{
			return this._Updateddate;
		}
		set
		{
			if ((this._Updateddate != value))
			{
				this.OnUpdateddateChanging(value);
				this.SendPropertyChanging();
				this._Updateddate = value;
				this.SendPropertyChanged("Updateddate");
				this.OnUpdateddateChanged();
			}
		}
	}
	
	[Association(Name="FK_UserClients_User", Storage="_UserClients", ThisKey="Userid", OtherKey="Userid", DeleteRule="NO ACTION")]
	public EntitySet<UserClients> UserClients
	{
		get
		{
			return this._UserClients;
		}
		set
		{
			this._UserClients.Assign(value);
		}
	}
	
	[Association(Name="FK_UserCredentials_User", Storage="_UserCredentials", ThisKey="Userid", OtherKey="Userid", IsUnique=true, IsForeignKey=false, DeleteRule="NO ACTION")]
	public UserCredentials UserCredentials
	{
		get
		{
			return this._UserCredentials.Entity;
		}
		set
		{
			UserCredentials previousValue = this._UserCredentials.Entity;
			if (((previousValue != value) 
						|| (this._UserCredentials.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._UserCredentials.Entity = null;
					previousValue.User = null;
				}
				this._UserCredentials.Entity = value;
				if ((value != null))
				{
					value.User = this;
				}
				this.SendPropertyChanged("UserCredentials");
			}
		}
	}
	
	[Association(Name="FK_UserData_User", Storage="_UserData", ThisKey="Userid", OtherKey="Userid", DeleteRule="NO ACTION")]
	public EntitySet<UserData> UserData
	{
		get
		{
			return this._UserData;
		}
		set
		{
			this._UserData.Assign(value);
		}
	}
	
	[Association(Name="FK_UserEmls_User", Storage="_UserEmls", ThisKey="Userid", OtherKey="Userid", DeleteRule="NO ACTION")]
	public EntitySet<UserEmls> UserEmls
	{
		get
		{
			return this._UserEmls;
		}
		set
		{
			this._UserEmls.Assign(value);
		}
	}
	
	[Association(Name="FK_UserFiles_User", Storage="_UserFiles", ThisKey="Userid", OtherKey="Userid", DeleteRule="NO ACTION")]
	public EntitySet<UserFiles> UserFiles
	{
		get
		{
			return this._UserFiles;
		}
		set
		{
			this._UserFiles.Assign(value);
		}
	}
	
	[Association(Name="FK_UserGroups_User", Storage="_UserGroups", ThisKey="Userid", OtherKey="Userid", DeleteRule="NO ACTION")]
	public EntitySet<UserGroups> UserGroups
	{
		get
		{
			return this._UserGroups;
		}
		set
		{
			this._UserGroups.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_UserClients(UserClients entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_UserClients(UserClients entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_UserData(UserData entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_UserData(UserData entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_UserEmls(UserEmls entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_UserEmls(UserEmls entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_UserFiles(UserFiles entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_UserFiles(UserFiles entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_UserGroups(UserGroups entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_UserGroups(UserGroups entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
}

[Table(Name="dbo.UserClients")]
public partial class UserClients : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _Userid;
	
	private System.Guid _Clientid;
	
	private EntityRef<Client> _Client;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUseridChanging(System.Guid value);
    partial void OnUseridChanged();
    partial void OnClientidChanging(System.Guid value);
    partial void OnClientidChanged();
    #endregion
	
	public UserClients()
	{
		this._Client = default(EntityRef<Client>);
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[Column(Name="userid", Storage="_Userid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Userid
	{
		get
		{
			return this._Userid;
		}
		set
		{
			if ((this._Userid != value))
			{
				this.OnUseridChanging(value);
				this.SendPropertyChanging();
				this._Userid = value;
				this.SendPropertyChanged("Userid");
				this.OnUseridChanged();
			}
		}
	}
	
	[Column(Name="clientid", Storage="_Clientid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Clientid
	{
		get
		{
			return this._Clientid;
		}
		set
		{
			if ((this._Clientid != value))
			{
				this.OnClientidChanging(value);
				this.SendPropertyChanging();
				this._Clientid = value;
				this.SendPropertyChanged("Clientid");
				this.OnClientidChanged();
			}
		}
	}
	
	[Association(Name="FK_UserClients_Client", Storage="_Client", ThisKey="Clientid", OtherKey="Clientid", IsForeignKey=true)]
	public Client Client
	{
		get
		{
			return this._Client.Entity;
		}
		set
		{
			Client previousValue = this._Client.Entity;
			if (((previousValue != value) 
						|| (this._Client.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Client.Entity = null;
					previousValue.UserClients.Remove(this);
				}
				this._Client.Entity = value;
				if ((value != null))
				{
					value.UserClients.Add(this);
					this._Clientid = value.Clientid;
				}
				else
				{
					this._Clientid = default(System.Guid);
				}
				this.SendPropertyChanged("Client");
			}
		}
	}
	
	[Association(Name="FK_UserClients_User", Storage="_User", ThisKey="Userid", OtherKey="Userid", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.UserClients.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.UserClients.Add(this);
					this._Userid = value.Userid;
				}
				else
				{
					this._Userid = default(System.Guid);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.UserCredentials")]
public partial class UserCredentials : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _Userid;
	
	private int _Credentials;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUseridChanging(System.Guid value);
    partial void OnUseridChanged();
    partial void OnCredentialsChanging(int value);
    partial void OnCredentialsChanged();
    #endregion
	
	public UserCredentials()
	{
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[Column(Name="userid", Storage="_Userid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Userid
	{
		get
		{
			return this._Userid;
		}
		set
		{
			if ((this._Userid != value))
			{
				this.OnUseridChanging(value);
				this.SendPropertyChanging();
				this._Userid = value;
				this.SendPropertyChanged("Userid");
				this.OnUseridChanged();
			}
		}
	}
	
	[Column(Storage="_Credentials", DbType="Int NOT NULL")]
	public int Credentials
	{
		get
		{
			return this._Credentials;
		}
		set
		{
			if ((this._Credentials != value))
			{
				this.OnCredentialsChanging(value);
				this.SendPropertyChanging();
				this._Credentials = value;
				this.SendPropertyChanged("Credentials");
				this.OnCredentialsChanged();
			}
		}
	}
	
	[Association(Name="FK_UserCredentials_User", Storage="_User", ThisKey="Userid", OtherKey="Userid", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.UserCredentials = null;
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.UserCredentials = this;
					this._Userid = value.Userid;
				}
				else
				{
					this._Userid = default(System.Guid);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.UserData")]
public partial class UserData : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _Userid;
	
	private System.Guid _Dataid;
	
	private EntityRef<Data> _Data;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUseridChanging(System.Guid value);
    partial void OnUseridChanged();
    partial void OnDataidChanging(System.Guid value);
    partial void OnDataidChanged();
    #endregion
	
	public UserData()
	{
		this._Data = default(EntityRef<Data>);
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[Column(Name="userid", Storage="_Userid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Userid
	{
		get
		{
			return this._Userid;
		}
		set
		{
			if ((this._Userid != value))
			{
				this.OnUseridChanging(value);
				this.SendPropertyChanging();
				this._Userid = value;
				this.SendPropertyChanged("Userid");
				this.OnUseridChanged();
			}
		}
	}
	
	[Column(Name="dataid", Storage="_Dataid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Dataid
	{
		get
		{
			return this._Dataid;
		}
		set
		{
			if ((this._Dataid != value))
			{
				this.OnDataidChanging(value);
				this.SendPropertyChanging();
				this._Dataid = value;
				this.SendPropertyChanged("Dataid");
				this.OnDataidChanged();
			}
		}
	}
	
	[Association(Name="FK_UserData_Data", Storage="_Data", ThisKey="Dataid", OtherKey="Dataid", IsForeignKey=true)]
	public Data Data
	{
		get
		{
			return this._Data.Entity;
		}
		set
		{
			Data previousValue = this._Data.Entity;
			if (((previousValue != value) 
						|| (this._Data.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Data.Entity = null;
					previousValue.UserData.Remove(this);
				}
				this._Data.Entity = value;
				if ((value != null))
				{
					value.UserData.Add(this);
					this._Dataid = value.Dataid;
				}
				else
				{
					this._Dataid = default(System.Guid);
				}
				this.SendPropertyChanged("Data");
			}
		}
	}
	
	[Association(Name="FK_UserData_User", Storage="_User", ThisKey="Userid", OtherKey="Userid", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.UserData.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.UserData.Add(this);
					this._Userid = value.Userid;
				}
				else
				{
					this._Userid = default(System.Guid);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.UserEmls")]
public partial class UserEmls : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _Userid;
	
	private System.Guid _Emlid;
	
	private EntityRef<Eml> _Eml;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUseridChanging(System.Guid value);
    partial void OnUseridChanged();
    partial void OnEmlidChanging(System.Guid value);
    partial void OnEmlidChanged();
    #endregion
	
	public UserEmls()
	{
		this._Eml = default(EntityRef<Eml>);
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[Column(Name="userid", Storage="_Userid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Userid
	{
		get
		{
			return this._Userid;
		}
		set
		{
			if ((this._Userid != value))
			{
				this.OnUseridChanging(value);
				this.SendPropertyChanging();
				this._Userid = value;
				this.SendPropertyChanged("Userid");
				this.OnUseridChanged();
			}
		}
	}
	
	[Column(Name="emlid", Storage="_Emlid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Emlid
	{
		get
		{
			return this._Emlid;
		}
		set
		{
			if ((this._Emlid != value))
			{
				this.OnEmlidChanging(value);
				this.SendPropertyChanging();
				this._Emlid = value;
				this.SendPropertyChanged("Emlid");
				this.OnEmlidChanged();
			}
		}
	}
	
	[Association(Name="FK_UserEmls_Eml", Storage="_Eml", ThisKey="Emlid", OtherKey="Emlid", IsForeignKey=true)]
	public Eml Eml
	{
		get
		{
			return this._Eml.Entity;
		}
		set
		{
			Eml previousValue = this._Eml.Entity;
			if (((previousValue != value) 
						|| (this._Eml.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Eml.Entity = null;
					previousValue.UserEmls.Remove(this);
				}
				this._Eml.Entity = value;
				if ((value != null))
				{
					value.UserEmls.Add(this);
					this._Emlid = value.Emlid;
				}
				else
				{
					this._Emlid = default(System.Guid);
				}
				this.SendPropertyChanged("Eml");
			}
		}
	}
	
	[Association(Name="FK_UserEmls_User", Storage="_User", ThisKey="Userid", OtherKey="Userid", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.UserEmls.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.UserEmls.Add(this);
					this._Userid = value.Userid;
				}
				else
				{
					this._Userid = default(System.Guid);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.UserFiles")]
public partial class UserFiles : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _Userid;
	
	private System.Guid _Fileid;
	
	private EntityRef<File> _File;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUseridChanging(System.Guid value);
    partial void OnUseridChanged();
    partial void OnFileidChanging(System.Guid value);
    partial void OnFileidChanged();
    #endregion
	
	public UserFiles()
	{
		this._File = default(EntityRef<File>);
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[Column(Name="userid", Storage="_Userid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Userid
	{
		get
		{
			return this._Userid;
		}
		set
		{
			if ((this._Userid != value))
			{
				this.OnUseridChanging(value);
				this.SendPropertyChanging();
				this._Userid = value;
				this.SendPropertyChanged("Userid");
				this.OnUseridChanged();
			}
		}
	}
	
	[Column(Name="fileid", Storage="_Fileid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Fileid
	{
		get
		{
			return this._Fileid;
		}
		set
		{
			if ((this._Fileid != value))
			{
				this.OnFileidChanging(value);
				this.SendPropertyChanging();
				this._Fileid = value;
				this.SendPropertyChanged("Fileid");
				this.OnFileidChanged();
			}
		}
	}
	
	[Association(Name="FK_UserFiles_File", Storage="_File", ThisKey="Fileid", OtherKey="Fileid", IsForeignKey=true)]
	public File File
	{
		get
		{
			return this._File.Entity;
		}
		set
		{
			File previousValue = this._File.Entity;
			if (((previousValue != value) 
						|| (this._File.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._File.Entity = null;
					previousValue.UserFiles.Remove(this);
				}
				this._File.Entity = value;
				if ((value != null))
				{
					value.UserFiles.Add(this);
					this._Fileid = value.Fileid;
				}
				else
				{
					this._Fileid = default(System.Guid);
				}
				this.SendPropertyChanged("File");
			}
		}
	}
	
	[Association(Name="FK_UserFiles_User", Storage="_User", ThisKey="Userid", OtherKey="Userid", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.UserFiles.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.UserFiles.Add(this);
					this._Userid = value.Userid;
				}
				else
				{
					this._Userid = default(System.Guid);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.UserGroups")]
public partial class UserGroups : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _Userid;
	
	private System.Guid _Groupid;
	
	private EntityRef<Group> _Group;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUseridChanging(System.Guid value);
    partial void OnUseridChanged();
    partial void OnGroupidChanging(System.Guid value);
    partial void OnGroupidChanged();
    #endregion
	
	public UserGroups()
	{
		this._Group = default(EntityRef<Group>);
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[Column(Name="userid", Storage="_Userid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Userid
	{
		get
		{
			return this._Userid;
		}
		set
		{
			if ((this._Userid != value))
			{
				this.OnUseridChanging(value);
				this.SendPropertyChanging();
				this._Userid = value;
				this.SendPropertyChanged("Userid");
				this.OnUseridChanged();
			}
		}
	}
	
	[Column(Name="groupid", Storage="_Groupid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Groupid
	{
		get
		{
			return this._Groupid;
		}
		set
		{
			if ((this._Groupid != value))
			{
				this.OnGroupidChanging(value);
				this.SendPropertyChanging();
				this._Groupid = value;
				this.SendPropertyChanged("Groupid");
				this.OnGroupidChanged();
			}
		}
	}
	
	[Association(Name="FK_UserGroups_Group", Storage="_Group", ThisKey="Groupid", OtherKey="Groupid", IsForeignKey=true)]
	public Group Group
	{
		get
		{
			return this._Group.Entity;
		}
		set
		{
			Group previousValue = this._Group.Entity;
			if (((previousValue != value) 
						|| (this._Group.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Group.Entity = null;
					previousValue.UserGroups.Remove(this);
				}
				this._Group.Entity = value;
				if ((value != null))
				{
					value.UserGroups.Add(this);
					this._Groupid = value.Groupid;
				}
				else
				{
					this._Groupid = default(System.Guid);
				}
				this.SendPropertyChanged("Group");
			}
		}
	}
	
	[Association(Name="FK_UserGroups_User", Storage="_User", ThisKey="Userid", OtherKey="Userid", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.UserGroups.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.UserGroups.Add(this);
					this._Userid = value.Userid;
				}
				else
				{
					this._Userid = default(System.Guid);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
